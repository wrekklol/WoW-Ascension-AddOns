----------------------------------------------------------- Addon declarationlocal HandyNotes = LibStub("AceAddon-3.0"):GetAddon("HandyNotes", true)if not HandyNotes then return endHandyNotes_ESN_Rare = LibStub("AceAddon-3.0"):NewAddon("HandyNotes_ESN_Rare","AceEvent-3.0")local HERARE = HandyNotes_ESN_Rarelocal Astrolabe = DongleStub("Astrolabe-0.4")local L = LibStub("AceLocale-3.0"):GetLocale("ESN_Rare", false)----------------------------------------------------------- Our db upvalue and db defaultslocal dblocal defaults = {	global = {		icon_distance		= 100,		icon_scale			= 1.0,		icon_alpha			= 1.0,		esnrare = {			["*"] = {},		},	},}----------------------------------------------------------- Localize some globalslocal next = nextlocal GameTooltip = GameTooltiplocal WorldMapTooltip = WorldMapTooltiplocal HandyNotes = HandyNotes----------------------------------------------------------- Constantslocal icon = "Interface\\Icons\\INV_Misc_Head_Dragon_01"----------------------------------------------------------- Plugin Handlers to HandyNoteslocal HERAREHandler = {}local info = {}local clickedCoord = nillocal clickedZone = nilfunction HERAREHandler:OnEnter(mapFile, coord)	local tooltip = self:GetParent() == WorldMapButton and WorldMapTooltip or GameTooltip	if ( self:GetCenter() > UIParent:GetCenter() ) then -- compare X coordinate		tooltip:SetOwner(self, "ANCHOR_LEFT")	else    tooltip:SetOwner(self, "ANCHOR_RIGHT")	end	tooltip:SetText(HERARE.db.global.esnrare[mapFile][coord])	tooltip:Show()	clickedCoord = nil	clickedZone = nilendfunction HERAREHandler:OnLeave(mapFile, coord)	if self:GetParent() == WorldMapButton then		WorldMapTooltip:Hide()	else		GameTooltip:Hide()	endendlocal function deletePin(button,mapFile,coord)	HERARE.db.global.esnrare[mapFile][coord] = nil	HERARE:SendMessage("HandyNotes_NotifyUpdate", "ESN_Rare")endlocal function createWaypoint(button,mapFile,coord)	local c, z = HandyNotes:GetCZ(mapFile)	local x, y = HandyNotes:getXY(coord)	if TomTom then		TomTom:AddZWaypoint(c, z, x*100, y*100, "ESN_Rare")	elseif Cartographer_Waypoints then		Cartographer_Waypoints:AddWaypoint(NotePoint:new(HandyNotes:GetCZToZone(c, z), x, y, "ESN_Rare"))	endendlocal function generateMenu(button, level)	if (not level) then return end	for k in pairs(info) do info[k] = nil end	if (level == 1) then		-- Create the title of the menu		info.isTitle      = 1		info.text         = "HandyNotes - ESN_Rare"		info.notCheckable = 1		UIDropDownMenu_AddButton(info, level)		-- Delete menu item		info.disabled     = nil		info.isTitle      = nil		info.notCheckable = nil		info.text = "Delete ESN_Rare mark"		info.icon = icon		info.func = deletePin		info.arg1 = clickedZone		info.arg2 = clickedCoord		UIDropDownMenu_AddButton(info, level);		if TomTom or Cartographer_Waypoints then			-- Waypoint menu item			info.disabled     = nil			info.isTitle      = nil			info.notCheckable = nil			info.text = "Create waypoint"			info.icon = nil			info.func = createWaypoint			info.arg1 = clickedZone			info.arg2 = clickedCoord			UIDropDownMenu_AddButton(info, level);		end		-- Close menu item		info.text         = "Close"		info.icon         = nil		info.func         = function() CloseDropDownMenus() end		info.arg1         = nil		info.notCheckable = 1		UIDropDownMenu_AddButton(info, level);	endendlocal HERARE_Dropdown = CreateFrame("Frame", "HandyNotes_ESN_RareDropdownMenu")HERARE_Dropdown.displayMode = "MENU"HERARE_Dropdown.initialize = generateMenufunction HERAREHandler:OnClick(button, down, mapFile, coord)	if button == "RightButton" and not down then		clickedZone = mapFile		clickedCoord = coord		ToggleDropDownMenu(1, nil, HERARE_Dropdown, self, 0, 0)	endenddo	-- This is a custom iterator we use to iterate over every node in a given zone	local function iter(t, prestate)		if not t then return nil end		local state, value = next(t, prestate)		while state do -- Have we reached the end of this zone?			if value then				return state, nil, icon, db.icon_scale, db.icon_alpha			end			state, value = next(t, state) -- Get next data		end		return nil, nil, nil, nil	end	function HERAREHandler:GetNodes(mapFile)		return iter, HERARE.db.global.esnrare[mapFile], nil	endend----------------------------------------------------------- Core functionsfunction HERARE:AddESN_RareEntry(rare)	local done = false	local c,z,x,y = Astrolabe:GetCurrentPlayerPosition()	if not c then return end	local loc = HandyNotes:getCoord(x, y)	local mapFile = HandyNotes:GetMapFile(c, z)	if not mapFile then return end	-- überprüfen ob noch keine notiz vorhanden ist	for coord,value in pairs(self.db.global.esnrare[mapFile]) do		if value then			local x2,y2 = HandyNotes:getXY(coord)			-- notiz in der nähe vorhanden			if Astrolabe:ComputeDistance(c,z,x,y,c,z,x2,y2) < self.db.global.icon_distance then				-- rare noch nicht erfasst				if self.db.global.esnrare[mapFile][coord] then					self:NewEntry (mapFile, coord, rare)					done = true					break				else				-- rare schon erfasst					done = true					break				end			end		end	end	-- komplet neuer eintrag	if done == false then		self:NewEntry (mapFile, loc, rare)	end	self:SendMessage("HandyNotes_NotifyUpdate", "ESN_Rare")end-- funktion für neuer eintragfunction HERARE:NewEntry (mapfile, loc, rare)		self.db.global.esnrare[mapfile][loc] = rareend----------------------------------------------------------- Options tablelocal options = {	type = "group",	name = "ESN_Rare",	desc = "ESN_Rare",	get = function(info) return db[info.arg] end,	set = function(info, v)		db[info.arg] = v		HERARE:SendMessage("HandyNotes_NotifyUpdate", "ESN_Rare")	end,	args = {		desc = {			name = "These settings control the look and feel of the ESN_Rare icon.",			type = "description",			order = 0,		},		icon_distance = {			type = "range",			name = "Icon Distance",			desc = "The min distance between icons on the map",			min = 10, max = 200, step = 10,			arg = "icon_distance",			order = 9,		},		icon_scale = {			type = "range",			name = "Icon Scale",			desc = "The scale of the icons",			min = 0.3, max = 2, step = 0.1,			arg = "icon_scale",			order = 10,		},		icon_alpha = {			type = "range",			name = "Icon Alpha",			desc = "The alpha transparency of the icons",			min = 0, max = 1, step = 0.01,			arg = "icon_alpha",			order = 20,		},	},}----------------------------------------------------------- Addon initialization, enabling and disablingfunction HERARE:OnInitialize()	-- Set up our database	self.db = LibStub("AceDB-3.0"):New("ESN_RareDB", defaults)	db = self.db.global ---Global	-- Initialize our database with HandyNotes	HandyNotes:RegisterPluginDB("ESN_Rare", HERAREHandler, options)endfunction HERARE:OnEnable()endfunction HERARE:OnDisable()end